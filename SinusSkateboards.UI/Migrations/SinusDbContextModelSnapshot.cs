// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SinusSkateboards.UI.Databas;

namespace SinusSkateboards.UI.Migrations
{
    [DbContext(typeof(SinusDbContext))]
    partial class SinusDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.9")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("SinusSkateboards.UI.Models.AdminModel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int>("AdminID")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("SinusSkateboards.UI.Models.CategoryModel", b =>
                {
                    b.Property<int>("CategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CategoryName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryID");

                    b.ToTable("Category");

                    b.HasData(
                        new
                        {
                            CategoryID = 1,
                            CategoryName = "Hoodie"
                        },
                        new
                        {
                            CategoryID = 2,
                            CategoryName = "Skateboard"
                        },
                        new
                        {
                            CategoryID = 3,
                            CategoryName = "Cap"
                        },
                        new
                        {
                            CategoryID = 4,
                            CategoryName = "T-shirt"
                        },
                        new
                        {
                            CategoryID = 5,
                            CategoryName = "Wheel"
                        });
                });

            modelBuilder.Entity("SinusSkateboards.UI.Models.ColorModel", b =>
                {
                    b.Property<int>("ColorID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ColorName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ColorID");

                    b.ToTable("Color");

                    b.HasData(
                        new
                        {
                            ColorID = 1,
                            ColorName = "Blue"
                        },
                        new
                        {
                            ColorID = 2,
                            ColorName = "Red"
                        },
                        new
                        {
                            ColorID = 3,
                            ColorName = "Grey"
                        },
                        new
                        {
                            ColorID = 4,
                            ColorName = "Green"
                        },
                        new
                        {
                            ColorID = 5,
                            ColorName = "Purple"
                        },
                        new
                        {
                            ColorID = 6,
                            ColorName = "Yellow"
                        },
                        new
                        {
                            ColorID = 7,
                            ColorName = "Pink"
                        },
                        new
                        {
                            ColorID = 8,
                            ColorName = "White"
                        },
                        new
                        {
                            ColorID = 9,
                            ColorName = "Multi-colored"
                        },
                        new
                        {
                            ColorID = 10,
                            ColorName = "None"
                        });
                });

            modelBuilder.Entity("SinusSkateboards.UI.Models.OrderModel", b =>
                {
                    b.Property<int>("OrderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.HasKey("OrderID");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("SinusSkateboards.UI.Models.ProductModel", b =>
                {
                    b.Property<int>("ProductID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryID")
                        .HasColumnType("int");

                    b.Property<int>("ColorID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(19,2)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductID");

                    b.HasIndex("CategoryID");

                    b.HasIndex("ColorID");

                    b.ToTable("Product");

                    b.HasData(
                        new
                        {
                            ProductID = 1,
                            CategoryID = 1,
                            ColorID = 5,
                            Description = "100% cotton",
                            PhotoPath = "hoodie-purple.png",
                            Price = 499m,
                            Title = "Purple hoodie"
                        },
                        new
                        {
                            ProductID = 2,
                            CategoryID = 1,
                            ColorID = 2,
                            Description = "100% cotton",
                            PhotoPath = "hoodie-fire.png",
                            Price = 499m,
                            Title = "Fire hoodie"
                        },
                        new
                        {
                            ProductID = 3,
                            CategoryID = 3,
                            ColorID = 1,
                            Description = "100% polyester",
                            PhotoPath = "sinus-cap-blue.png",
                            Price = 299m,
                            Title = "Blue cap"
                        },
                        new
                        {
                            ProductID = 4,
                            CategoryID = 4,
                            ColorID = 1,
                            Description = "100% cotton",
                            PhotoPath = "sinus-tshirt-blue.png",
                            Price = 349m,
                            Title = "Blue T-shirt"
                        },
                        new
                        {
                            ProductID = 5,
                            CategoryID = 2,
                            ColorID = 9,
                            Description = "2% glue, 98% maple",
                            PhotoPath = "sinus-skateboard-ink.png",
                            Price = 999m,
                            Title = "Ink skateboard"
                        },
                        new
                        {
                            ProductID = 6,
                            CategoryID = 5,
                            ColorID = 8,
                            Description = "4-pack, 100% PU-gummy",
                            PhotoPath = "sinus-wheel-spinner.png",
                            Price = 289m,
                            Title = "Spinner wheel"
                        },
                        new
                        {
                            ProductID = 7,
                            CategoryID = 3,
                            ColorID = 5,
                            Description = "100% polyester",
                            PhotoPath = "sinus-cap-purple.png",
                            Price = 299m,
                            Title = "Purple cap"
                        },
                        new
                        {
                            ProductID = 8,
                            CategoryID = 4,
                            ColorID = 6,
                            Description = "100% cotton",
                            PhotoPath = "sinus-tshirt-yellow.png",
                            Price = 349m,
                            Title = "Yellow T-shirt"
                        },
                        new
                        {
                            ProductID = 9,
                            CategoryID = 4,
                            ColorID = 5,
                            Description = "100% cotton",
                            PhotoPath = "sinus-tshirt-purple.png",
                            Price = 349m,
                            Title = "Purple T-shirt"
                        },
                        new
                        {
                            ProductID = 10,
                            CategoryID = 2,
                            ColorID = 6,
                            Description = "2% glue, 98% maple",
                            PhotoPath = "sinus-skateboard-yellow.png",
                            Price = 999m,
                            Title = "Yellow skateboard"
                        },
                        new
                        {
                            ProductID = 11,
                            CategoryID = 2,
                            ColorID = 9,
                            Description = "2% glue, 98% maple",
                            PhotoPath = "sinus-skateboard-fire.png",
                            Price = 999m,
                            Title = "Fire skateboard"
                        },
                        new
                        {
                            ProductID = 12,
                            CategoryID = 2,
                            ColorID = 9,
                            Description = "2% glue, 98% maple",
                            PhotoPath = "sinus-skateboard-northern_lights.png",
                            Price = 999m,
                            Title = "Northern lights skateboard"
                        },
                        new
                        {
                            ProductID = 13,
                            CategoryID = 4,
                            ColorID = 7,
                            Description = "100% cotton",
                            PhotoPath = "sinus-tshirt-pink.png",
                            Price = 349m,
                            Title = "Pink T-shirt"
                        },
                        new
                        {
                            ProductID = 14,
                            CategoryID = 2,
                            ColorID = 10,
                            Description = "2% glue, 98% maple",
                            PhotoPath = "sinus-skateboard-logo.png",
                            Price = 999m,
                            Title = "Logo skateboard"
                        },
                        new
                        {
                            ProductID = 15,
                            CategoryID = 2,
                            ColorID = 5,
                            Description = "2% glue, 98% maple",
                            PhotoPath = "sinus-skateboard-purple.png",
                            Price = 999m,
                            Title = "Purple skateboard"
                        },
                        new
                        {
                            ProductID = 16,
                            CategoryID = 1,
                            ColorID = 1,
                            Description = "100% cotton",
                            PhotoPath = "hoodie-ocean.png",
                            Price = 499m,
                            Title = "Ocean hoodie"
                        },
                        new
                        {
                            ProductID = 17,
                            CategoryID = 3,
                            ColorID = 2,
                            Description = "100% polyester",
                            PhotoPath = "sinus-cap-red.png",
                            Price = 299m,
                            Title = "Red cap"
                        },
                        new
                        {
                            ProductID = 18,
                            CategoryID = 3,
                            ColorID = 4,
                            Description = "100% polyester",
                            PhotoPath = "sinus-cap-green.png",
                            Price = 299m,
                            Title = "Green cap"
                        },
                        new
                        {
                            ProductID = 19,
                            CategoryID = 5,
                            ColorID = 8,
                            Description = "4-pack, 100% PU-gummy",
                            PhotoPath = "sinus-wheel-rocket.png",
                            Price = 289m,
                            Title = "Rocket wheel"
                        },
                        new
                        {
                            ProductID = 20,
                            CategoryID = 4,
                            ColorID = 3,
                            Description = "100% cotton",
                            PhotoPath = "sinus-tshirt-grey.png",
                            Price = 349m,
                            Title = "Grey T-shirt"
                        },
                        new
                        {
                            ProductID = 21,
                            CategoryID = 2,
                            ColorID = 9,
                            Description = "2% glue, 98% maple",
                            PhotoPath = "sinus-skateboard-eagle.png",
                            Price = 999m,
                            Title = "Eagle skateboard"
                        },
                        new
                        {
                            ProductID = 22,
                            CategoryID = 2,
                            ColorID = 9,
                            Description = "2% glue, 98% maple",
                            PhotoPath = "sinus-skateboard-gretasfury.png",
                            Price = 999m,
                            Title = "Gretasfury skateboard"
                        },
                        new
                        {
                            ProductID = 23,
                            CategoryID = 2,
                            ColorID = 9,
                            Description = "2% glue, 98% maple",
                            PhotoPath = "sinus-skateboard-plastic.png",
                            Price = 999m,
                            Title = "Plastic skateboard"
                        },
                        new
                        {
                            ProductID = 24,
                            CategoryID = 5,
                            ColorID = 8,
                            Description = "4-pack, 100% PU-gummy",
                            PhotoPath = "sinus-wheel-wave.png",
                            Price = 289m,
                            Title = "Wave wheel"
                        },
                        new
                        {
                            ProductID = 25,
                            CategoryID = 1,
                            ColorID = 3,
                            Description = "100% cotton",
                            PhotoPath = "hoodie-ash.png",
                            Price = 499m,
                            Title = "Ash hoodie"
                        },
                        new
                        {
                            ProductID = 26,
                            CategoryID = 1,
                            ColorID = 4,
                            Description = "100% cotton",
                            PhotoPath = "hoodie-green.png",
                            Price = 499m,
                            Title = "Green hoodie"
                        },
                        new
                        {
                            ProductID = 27,
                            CategoryID = 2,
                            ColorID = 9,
                            Description = "2% glue, 98% maple",
                            PhotoPath = "sinus-skateboard-polar.png",
                            Price = 999m,
                            Title = "Polar skateboard"
                        });
                });

            modelBuilder.Entity("SinusSkateboards.UI.Models.ProductQuantityModel", b =>
                {
                    b.Property<int>("ProductQuantityID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("OrderID")
                        .HasColumnType("int");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("ProductQuantityID");

                    b.HasIndex("OrderID");

                    b.HasIndex("ProductID");

                    b.ToTable("ProductQuantity");
                });

            modelBuilder.Entity("SinusSkateboards.UI.Models.UserModel", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Adress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("PhoneNumber")
                        .HasColumnType("int");

                    b.Property<int>("PostalCode")
                        .HasColumnType("int");

                    b.Property<string>("SurName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserID");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.ToTable("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("SinusSkateboards.UI.Models.AdminModel", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("SinusSkateboards.UI.Models.AdminModel", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SinusSkateboards.UI.Models.AdminModel", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("SinusSkateboards.UI.Models.AdminModel", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SinusSkateboards.UI.Models.ProductModel", b =>
                {
                    b.HasOne("SinusSkateboards.UI.Models.CategoryModel", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SinusSkateboards.UI.Models.ColorModel", "Color")
                        .WithMany()
                        .HasForeignKey("ColorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Color");
                });

            modelBuilder.Entity("SinusSkateboards.UI.Models.ProductQuantityModel", b =>
                {
                    b.HasOne("SinusSkateboards.UI.Models.OrderModel", "Order")
                        .WithMany("Products")
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SinusSkateboards.UI.Models.ProductModel", "Product")
                        .WithMany()
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("SinusSkateboards.UI.Models.UserModel", b =>
                {
                    b.HasOne("SinusSkateboards.UI.Models.OrderModel", "Order")
                        .WithOne("User")
                        .HasForeignKey("SinusSkateboards.UI.Models.UserModel", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("SinusSkateboards.UI.Models.OrderModel", b =>
                {
                    b.Navigation("Products");

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
